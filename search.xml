<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>入门篇-Druid</title>
    <url>//article/2020/05/05/%E5%85%A5%E9%97%A8%E7%AF%87-Druid/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1>入门篇-Druid</h1>
<p>​	频繁的建立连接和释放连接是非常消耗资源的，因此我们需要将建立的连接保存起来以便下次直接使用，保存通常以连接池的方式保存，当某个线程需要一个JDBC连接时就去池中获取一个，连接的管理完全交由连接池进行。</p>
<p>​	Druid为阿里巴巴的数据源，（数据库连接池），集合了c3p0、dbcp、proxool等连接池的优点，还加入了日志监控，有效的监控DB池连接和SQL的执行情况😗。</p>

    <div id="aplayer-hqEzqZqd" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="2574880937" data-server="tencent" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86" data-listfolded="true" data-order="random"
    ></div>
<a id="more"></a>
<h2 id="基本使用">基本使用</h2>
<h3 id="配置依赖">配置依赖</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="配置">配置</h2>
<p>​	Druid的核心是DruidDataSource，想要使用Druid首先要创建一个DruidDataSource对象，连接池的配置信息可以通过这个对象来配置，也可以在创建DruidDataSource对象后使用<code>configFromPropety</code>传入一个Properties对象来批量配置。通常情况下我们是使用Spring创建一个DruidDataSource对象，通过依赖注入的方式往对象里设置属性，这里我们使用Properties的方式来创建，Spring的方式放在后面😴。</p>
<p>​	首先创建一个Properties文件保存Druid的配置，下面是一份常用配置（实际Druid的可配置项远不止这么多）</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">druid.url</span>=<span class="string">jdbc:mysql://localhost:3306/db</span></span><br><span class="line"><span class="meta">druid.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">druid.password</span>=<span class="string">root</span></span><br><span class="line"><span class="comment">#使用StatFilter统计监控</span></span><br><span class="line"><span class="meta">druid.filters</span>=<span class="string">stat</span></span><br><span class="line"><span class="comment">#最大连接数</span></span><br><span class="line"><span class="meta">druid.maxActive</span>=<span class="string">20</span></span><br><span class="line"><span class="comment">#初始连接数</span></span><br><span class="line"><span class="meta">druid.initialSize</span>=<span class="string">1</span></span><br><span class="line"><span class="comment">#从池中取连接的最大等待时间</span></span><br><span class="line"><span class="meta">druid.maxWait</span>=<span class="string">60000</span></span><br><span class="line"><span class="comment">#最小空闲数</span></span><br><span class="line"><span class="meta">druid.minIdle</span>=<span class="string">1</span></span><br><span class="line"><span class="comment">#每60秒运行一次空闲连接回收器</span></span><br><span class="line"><span class="meta">druid.timeBetweenEvictionRunsMillis</span>=<span class="string">60000</span></span><br><span class="line"><span class="comment">#池中的连接空闲5分钟后被回收</span></span><br><span class="line"><span class="meta">druid.minEvictableIdleTimeMillis</span>=<span class="string">300000</span></span><br><span class="line"><span class="comment">#获取连接时不检测池中连接可用性（检测会非常消耗性能，不检测可能会带来一个问题，有线程将获取到到连接关闭，其它线程依然会拿到这个关闭到连接）</span></span><br><span class="line"><span class="meta">druid.testOnBorrow</span>=<span class="string">false</span></span><br><span class="line"><span class="comment">#申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效</span></span><br><span class="line"><span class="meta">druid.testWhileIdl</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</span></span><br><span class="line"><span class="meta">druid.poolPreparedStatements</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">druid.asyncInit</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>
<p>​	通常情况下我们创建时间库连接时要加载驱动，但是在Druid配置上完全没有了驱动信息😄,这个为啥呢😏,翻一下源码，我们可以看到<code>JdbcUtils#getDriverClassName</code>这个方法里，通过解析Url成功获取到了DriverClassName，当然不在里面的驱动就只能自己手动配置DriverClassName了（还没遇到过，版本比较新的Druid里连各种大数据组件、ES都支持了，应该只有老版本可能会出现吧😰）。</p>
<p>​	配置文件准备好了开始创建DataSource。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        InputStream resourceAsStream = DataSourceTest.class.getClassLoader().getResourceAsStream("druid-simple.properties");</span><br><span class="line">        properties.load(resourceAsStream);</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setConnectProperties(properties);</span><br></pre></td></tr></table></figure>
<p>😰好像忘记了什么东西，数据库驱动呢？？</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>插一个题外话，MYSQL驱动版本兼容都很好，但是升级版本可能会有大坑，如果大家都用同一个库，一个用新的驱动一个用老的驱动直接会导致大家GG。</p>
<h2 id="执行SQL">执行SQL</h2>
<p>​	DataSource创建好了，但是我怎么知道这样玩是不是对的😉,写个SQL跑一遍看看。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DruidPooledConnection connection = dataSource.getConnection();</span><br><span class="line">       Statement statement = connection.createStatement();</span><br><span class="line">       ResultSet resultSet = statement.executeQuery(<span class="string">"select * from user"</span>);</span><br><span class="line">       <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">           System.out.print(resultSet.getString(<span class="number">1</span>));</span><br><span class="line">           System.out.println(resultSet.getString(<span class="number">2</span>));</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<p>允许一下看看</p>
<p><img src="https://mac-image.oss-cn-shanghai.aliyuncs.com/2020%2F05%2F03%2F09472acde274f5e99e3e751ab9173489.png" alt="image-20200503122844883"></p>
<p>Ok🙂结果都查出来了，等等，那个WAN是啥🐷</p>
<p>翻译一下就知道</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">请注意:不建议在没有服务器身份验证的情况下建立SSL连接。根据MySQL 5.5.45+、5.6.26+和5.7.6+的要求，如果不设置显式选项，则必须建立默认的SSL连接。您需要通过设置useSSL&#x3D;false显式地禁用SSL，或者设置useSSL&#x3D;true并为服务器证书验证提供信任存储</span><br></pre></td></tr></table></figure>
<p>我们在URL上显示指定就好了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">druid.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;db?useSSL&#x3D;false</span><br></pre></td></tr></table></figure>
<h2 id="SQL监控">SQL监控</h2>
<p>​	Druid不是号称为监控而生吗，那我们要怎么监控我们的SQL呢？</p>
<h3 id="慢SQL监控">慢SQL监控</h3>
<p>​	Druid其实已经提供慢SQL的监控<code>StatFilter</code>,我们在上面的配置文件里也将这个Filter配置了，但是想要监控慢SQL还需要一些额外的配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#日志打印慢SQL</span><br><span class="line">druid.stat.logSlowSql&#x3D;true</span><br><span class="line">#超过3000ms的SQL为慢SQL</span><br><span class="line">druid.stat.slowSqlMillis&#x3D;3000</span><br><span class="line">#合并相同的SQL，避免重复统计</span><br><span class="line">druid.stat.mergeSql&#x3D;true</span><br></pre></td></tr></table></figure>
<p>​	配置是配置了，但是我们还要想办法弄个慢SQL出来才能看到效果。😱我怎么知道慢SQL怎么出来的，要是知道我程序还会有慢SQL吗。</p>
<p>​	其实我们开个事务不提交，然后执行程序等待3s，然后提交事务，这个时候就有慢SQL了，记住最后一定要提交事务，不然就不是慢SQL，而是获取锁超时了😥</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> begin;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"> </span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> update user <span class="built_in">set</span> name =<span class="string">'章三'</span> <span class="built_in">where</span> id = 1;</span></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> commit;</span></span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DruidPooledConnection connection = dataSource.getConnection();</span><br><span class="line">       Statement statement = connection.createStatement();</span><br><span class="line">       statement.execute(<span class="string">"update user set name ='章三1' where id = 1;"</span>);</span><br></pre></td></tr></table></figure>
<p>​	😨,好像啥都没有，怎么搞。</p>
<p><img src="https://mac-image.oss-cn-shanghai.aliyuncs.com/2020%2F05%2F03%2F8c4a9be836a0776997fb398f1f1c9457.png" alt="image-20200503125146759"></p>
<p>​	又好像忘了什么东西😭,我们木有配置日志组件啊</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>​	Druid支持几个常用的日志组件，如，slf4j、log4j、log4j2、jdkLog等，有兴趣可以看	<code>com.alibaba.druid.support.logging.LogFactory</code></p>
<p>​	配置完日志组件后在将上面步骤走一次将好了😄</p>
<p><img src="https://mac-image.oss-cn-shanghai.aliyuncs.com/2020%2F05%2F03%2Fd069cf13cd11c0eb03ed9eefd713a3ca.png" alt="image-20200503144710635"></p>
<h3 id="Druid控制台">Druid控制台</h3>
<p>​	Druid提供了一个Web页面来监控<code>StatViewServlet</code>,理论上非Web项目也可以通过Jmx来完成监控，非Web项目可以参考<a href="https://blog.csdn.net/binglovezi/article/details/50610269" target="_blank" rel="noopener">Druid监控</a>，我们现在以Spring Boot等方式来配置一个Druid控制台，关于Spring Boot继承Druid的配置后面在写，这里我们主要关注<code>StatViewServlet</code>的配置，控制台不需要额外的依赖。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ServletRegistrationBean&lt;Servlet&gt; <span class="title">druidServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       ServletRegistrationBean&lt;Servlet&gt; servletRegistrationBean = <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;();</span><br><span class="line">       servletRegistrationBean.setServlet(<span class="keyword">new</span> StatViewServlet());</span><br><span class="line">       servletRegistrationBean.addUrlMappings(<span class="string">"/druid/*"</span>);</span><br><span class="line">       Map&lt;String, String&gt; initParam = <span class="keyword">new</span> HashMap(<span class="number">8</span>);</span><br><span class="line">       initParam.put(<span class="string">"loginUsername"</span>, <span class="string">"admin"</span>);</span><br><span class="line">       initParam.put(<span class="string">"loginPassword"</span>, <span class="string">"admin"</span>);</span><br><span class="line">       initParam.put(<span class="string">"resetEnable"</span>, <span class="string">"true"</span>);</span><br><span class="line">       initParam.put(<span class="string">"allow"</span>, <span class="string">""</span>);</span><br><span class="line">       servletRegistrationBean.setInitParameters(initParam);</span><br><span class="line">       <span class="keyword">return</span> servletRegistrationBean;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> FilterRegistrationBean&lt;WebStatFilter&gt; <span class="title">filterRegistrationBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       FilterRegistrationBean&lt;WebStatFilter&gt; filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;();</span><br><span class="line">       filterRegistrationBean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line">       filterRegistrationBean.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">       filterRegistrationBean.addInitParameter(<span class="string">"exclusions"</span>, <span class="string">"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"</span>);</span><br><span class="line">       <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>​	配置完成重启Spring Boot，访问<code>http://localhost:8080/druid/login.html</code>，可以看到我们的数据源配置和执行的SQL。</p>
<p><img src="https://mac-image.oss-cn-shanghai.aliyuncs.com/2020%2F05%2F03%2F0a8a11a7407128c0cfb6e6c0b9a82e06.png" alt="image-20200503152724717"></p>
<h3 id="自定义Filter">自定义Filter</h3>
<p>​	Druid的监控都是通过Filter来进行的，我们可以实现其Filter接口或者改造已有的Filter来完成我们的需求😙</p>
<h2 id="与Spring集成">与Spring集成</h2>
<p>​	与Spring集成的思路基本和上面是一样的，引入依赖，创建DruidDataSource对象，然后对对象设置属性，只是因为我们使用了Spring，对对象的处理就不能直接简单粗暴的new、set了，需要使用Spring容器来进行。</p>
<p>​	直接在原项目上改改，来帮它变成Spring项目吧。</p>
<p>​	直接引入Spring全家桶的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>​	这里Jdbc不是必须的，但是一般情况下我们不会在项目里直接使用DataSource，而且使用JdbcTemplate或者Jpa、Mybatisdengdeng。</p>
<p>​	依赖导完后就是Spring配置文件里，按照我们上面说的，创建对象，塞属性即可🙂,但是现在又有个问题了，我这个项目是刚刚那个转过来的，我想直接用我刚刚配置好的参数怎么办😢，Spring可以将Properties文件引入配置文件，在Spring配置中直接使用Properties的参数，我们来试下吧。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"config"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.PropertySourcesPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:druid-simple.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"druidDataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.url&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.username&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.maxActive&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.initialSize&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.maxWait&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.minIdle&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeBetweenConnectErrorMillis"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.timeBetweenEvictionRunsMillis&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.minEvictableIdleTimeMillis&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.testOnBorrow&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testWhileIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.testWhileIdl&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolPreparedStatements"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.poolPreparedStatements&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"asyncInit"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.asyncInit&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"proxyFilters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stat"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.filter.stat.StatFilter"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"logSlowSql"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"slowSqlMillis"</span> <span class="attr">value</span>=<span class="string">"3000"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mergeSql"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>​	这样我们Properties的参数就过来了哦，这个方式有一个好处哦😗,我们账号密码等关键参数可以放在服务器的某个角落，通过这个访问引入进来，不同放在代码中(绝对不能放代码)，而且properties的值后面的会覆盖前面的。</p>
<p>​	对了，也没有发现一些细微的区别🙂,stat和sql监控的参数好像配置的完全不一样了😊，这是因为sql参数原本就是filter里面的，我们原来的配置中，filter会有Datasource来创建，初始化filter时会把Datasource中的connProperties属性传入filter，但是现在没有没有设置connproperties属性，filter自然就拿不到sql监控的参数了。</p>
<p>​	最后我们在来配置一个Jdbctemplate吧（通常来说还应该配置事务管理器，但是这不是我们重点，就不配了）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;jdbcTemPlate&quot; class&#x3D;&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;</span><br><span class="line">     &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;druidDataSource&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>
<p>​	配置完成了，执行一下吧。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;spring.xml&quot;);</span><br><span class="line">JdbcTemplate jdbcTemplate &#x3D; context.getBean(JdbcTemplate.class);</span><br><span class="line">jdbcTemplate.execute(&quot;update user set name &#x3D;&#39;章三11&#39; where id &#x3D; 1;&quot;);</span><br></pre></td></tr></table></figure>
<p>​</p>
<h2 id="与Spring-Boot集成">与Spring Boot集成</h2>
<p>​	Druid官方提供了druid-spring-boot-starter来进行快速配置😘,首先我们引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后我们在application.properties中进行配置就好了，Druid的配置是以<code>spring.datasource.druid</code>开头哦，配置完成后，Spring Boot会自动帮我们创建一个DataSource对象，我们直接通过依赖注入就可以使用了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DataSource dataSource;</span><br></pre></td></tr></table></figure>
<p>注意，这个地方不能注入DruidDataSource对象哦，Druid-boot帮我们创建的对象是这样滴</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(</span><br><span class="line">        initMethod = <span class="string">"init"</span></span><br><span class="line">    )</span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"Init DruidDataSource"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSourceWrapper();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>​	对象除了<code>spring.datasource.druid</code>开头的配置以外，也会使用部分<code>spring.datasource</code>的配置哦（其实就是url、username、password、driverClassName），对这部分感兴趣的，可以看看<code>com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper</code>，当然优先级更高的是<code>spring.datasource.druid</code>开头的配置。</p>
<p>​	注意大多数情况下我们是不会直接使用DataSource对象吧，复杂点的使用Mybatis获取Jpa，简单点的可以直接使用JdbcTemplate。</p>
<h2 id="其它配置">其它配置</h2>
<p>​	Druid的配置是很多的，可以到DruidDataSource中去找，包括线程复用等等，有时间在这里列举一下。</p>
]]></content>
  </entry>
</search>
